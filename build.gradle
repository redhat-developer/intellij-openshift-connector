import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    ext {
        ijGradlePluginVersion = (DefaultNativePlatform.currentOperatingSystem.isMacOsX() ? "1.7.0" : "1.13.3")
    }
}

plugins {
    id "org.jetbrains.intellij" version "${ijGradlePluginVersion}"
    id "com.adarshr.test-logger" version "3.2.0"
    id "idea"
    id "java"
    id "jacoco"
    id "org.sonarqube" version "3.0"
}

repositories {
    mavenLocal()
    maven { url 'https://repository.jboss.org' }
    mavenCentral()
    maven { url 'https://www.jetbrains.com/intellij-repository/snapshots' }
    maven { url "https://www.jetbrains.com/intellij-repository/releases" }
    maven { url "https://cache-redirector.jetbrains.com/intellij-dependencies" }
}

sourceCompatibility = '11'
targetCompatibility = '11'

intellij {
    version = ideaVersion //for a full list of IntelliJ IDEA releases please see https://www.jetbrains.com/intellij-repository/releases
    type = "IU"
    pluginName = 'org.jboss.tools.intellij.openshift'
    // use '<git repo clone>/build/idea-sandbox/plugins/<plugin>' if working from source
    plugins = [
            'java',
            'terminal',
            'JavaScriptDebugger',
            'JavaScript',
            'com.intellij.css',
            'yaml',
            'com.redhat.devtools.intellij.telemetry:0.0.3.33',
            'com.redhat.devtools.intellij.kubernetes:0.8.0.220'
    ]
	updateSinceUntilBuild = false
}

//with this option enabled, build will fail about IDEA expiration builds
buildSearchableOptions.enabled = false

runPluginVerifier {
    ideVersions = [ideaVersion]
}

publishPlugin {
    token = jetBrainsToken
    channels = [jetBrainsChannel]
}

configurations {
    implementation {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        java.srcDir file('src/it/java')
        resources.srcDir file('src/it/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

tasks.register('integrationTest', Test) {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
    testlogger {
        showStandardStreams true
        showPassedStandardStreams false
        showSkippedStandardStreams false
        showFailedStandardStreams true
        showFullStackTraces true
    }
}

tasks.register('integrationUITest', Test) {
    useJUnitPlatform {
        includeTags 'ui-test'
    }
    description = 'Runs the integration UI tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { true }
    mustRunAfter test
}

dependencies {
    implementation(
            'io.fabric8:openshift-client:6.4.0',
            'org.apache.commons:commons-compress:1.21',
            'org.apache.commons:commons-exec:1.3',
            'org.apache.commons:commons-lang3:3.9',
            'com.redhat.devtools.intellij:intellij-common:1.9.1-SNAPSHOT',
            'io.jsonwebtoken:jjwt-impl:0.11.2',
            'io.jsonwebtoken:jjwt-jackson:0.11.2',
            'org.keycloak:keycloak-installed-adapter:20.0.3',
            'com.squareup.retrofit2:converter-jackson:2.9.0')
    testImplementation(
            'org.mockito:mockito-core:4.9.0',
            'org.easytesting:fest-assert:1.4',
            'com.redhat.devtools.intellij:intellij-common:1.9.1-SNAPSHOT:test',
            'org.awaitility:awaitility:4.1.0',
            'org.mock-server:mockserver-client-java:5.13.2',
            'org.mock-server:mockserver-netty:5.13.2',
            'com.redhat.devtools.intellij:intellij-common-ui-test-library:0.2.0',
            'org.junit.jupiter:junit-jupiter-engine:5.8.2',
            'org.junit.jupiter:junit-jupiter-api:5.8.2',
            'org.junit.jupiter:junit-jupiter:5.8.2')
}

sonarqube {
    properties {
        property "sonar.projectKey", "redhat-developer_intellij-openshift-connector"
        property "sonar.organization", "redhat-developer"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.junit.reportsPath", "$buildDir/test-results/"
    }
}

jacocoTestReport {
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
    reports {
        xml.getRequired().set true
    }
}

runIde {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
    //systemProperties['jboss.sandbox.api.endpoint'] = 'http://localhost:3000'
}

tasks.register('runSandbox', JavaExec) {
    group = "Execution"
    description = "Run the Sandbox registration server in port 3000"
    classpath = sourceSets.test.runtimeClasspath
    getMainClass().set 'org.jboss.tools.intellij.openshift.ui.sandbox.SandboxRegistrationServerMock'
}

group 'org.jboss.tools.intellij'
version projectVersion // Plugin version
