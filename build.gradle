plugins {
    id 'org.jetbrains.intellij' version '1.14.1'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'idea'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '3.0'
}

repositories {
    mavenLocal()
    maven { url 'https://repository.jboss.org' }
    mavenCentral()
    maven { url 'https://www.jetbrains.com/intellij-repository/snapshots' }
    maven { url 'https://www.jetbrains.com/intellij-repository/releases' }
    maven { url 'https://cache-redirector.jetbrains.com/intellij-dependencies' }
}

sourceCompatibility = '11'
targetCompatibility = '11'

intellij {
    version = ideaVersion //for a full list of IntelliJ IDEA releases please see https://www.jetbrains.com/intellij-repository/releases
    pluginName = 'org.jboss.tools.intellij.openshift'
    // use '<git repo clone>/build/idea-sandbox/plugins/<plugin>' if working from source
    plugins = [
            'java',
            'terminal',
            'JavaScriptDebugger',
            'JavaScript',
            'com.intellij.css',
            'yaml',
            'com.redhat.devtools.intellij.telemetry:1.0.0.44',
            'com.redhat.devtools.intellij.kubernetes:0.8.0.220'
    ]
	updateSinceUntilBuild = false
}

//with this option enabled, build will fail about IDEA expiration builds
buildSearchableOptions.enabled = false

runPluginVerifier {
    ideVersions = [ideaVersion]
}

publishPlugin {
    token = jetBrainsToken
    channels = [jetBrainsChannel]
}

configurations {
    implementation {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        java.srcDir file('src/it/java')
        resources.srcDir file('src/it/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

test {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'

    // Discover and execute JUnit4-based tests
    useJUnit()
}

tasks.register('integrationTest', Test) {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testlogger {
        showStandardStreams true
        showPassedStandardStreams false
        showSkippedStandardStreams false
        showFailedStandardStreams true
        showFullStackTraces true
    }
}

tasks.register('integrationUITest', Test) {
    useJUnitPlatform {
        includeTags 'ui-test'
    }
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
    description = 'Runs the integration UI tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { true }
    testlogger {
        showStandardStreams true
        showPassedStandardStreams false
        showSkippedStandardStreams false
        showFailedStandardStreams true
        showFullStackTraces true
    }
}

dependencies {
    implementation(
            'io.fabric8:openshift-client:6.4.1',
            'org.apache.commons:commons-compress:1.21',
            'org.apache.commons:commons-exec:1.3',
            'org.apache.commons:commons-lang3:3.9',
            'com.redhat.devtools.intellij:intellij-common:1.9.1',
            'io.jsonwebtoken:jjwt-impl:0.11.2',
            'io.jsonwebtoken:jjwt-jackson:0.11.2',
            'org.keycloak:keycloak-installed-adapter:20.0.3',
            'com.squareup.retrofit2:converter-jackson:2.9.0',
            'com.google.code.gson:gson:2.9.0')
    testImplementation(
            'org.mockito:mockito-core:4.9.0',
            'org.easytesting:fest-assert:1.4',
            'com.redhat.devtools.intellij:intellij-common:1.9.1:test',
            'org.awaitility:awaitility:4.1.0',
            'org.mock-server:mockserver-client-java:5.15.0',
            'org.mock-server:mockserver-netty:5.15.0',
            'com.redhat.devtools.intellij:intellij-common-ui-test-library:0.2.0',
            'org.junit.jupiter:junit-jupiter-engine:5.8.2',
            'org.junit.jupiter:junit-jupiter-api:5.8.2',
            'org.junit.jupiter:junit-jupiter:5.8.2')
    constraints {
        implementation('io.undertow:undertow-core:2.2.24.Final') {
            because 'https://app.snyk.io/vuln/SNYK-JAVA-IOUNDERTOW-3339519'
        }
        implementation('com.squareup.okhttp3:okhttp:4.9.2') {
            because 'https://app.snyk.io/vuln/SNYK-JAVA-COMSQUAREUPOKHTTP3-2958044'
        }
        implementation('org.jboss.resteasy:resteasy-core:4.7.8.Final') {
            because 'https://app.snyk.io/vuln/SNYK-JAVA-ORGJBOSSRESTEASY-3338627'
        }
        implementation('org.jboss.xnio:xnio-api:3.8.8.Final') {
            because 'https://app.snyk.io/vuln/SNYK-JAVA-ORGJBOSSXNIO-2994360'
        }
        testImplementation('maven:junit:junit:4.13.1') {
            because 'https://github.com/advisories/GHSA-269g-pwp5-87pp'
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "redhat-developer_intellij-openshift-connector"
        property "sonar.organization", "redhat-developer"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.junit.reportsPath", "$buildDir/test-results/"
    }
}

jacocoTestReport {
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
    reports {
        xml.getRequired().set true
    }
}

runIde {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
    //systemProperties['jboss.sandbox.api.endpoint'] = 'http://localhost:3000'
}

tasks.register('runSandbox', JavaExec) {
    group = "Execution"
    description = "Run the Sandbox registration server in port 3000"
    classpath = sourceSets.test.runtimeClasspath
    getMainClass().set 'org.jboss.tools.intellij.openshift.ui.sandbox.SandboxRegistrationServerMock'
}

group 'org.jboss.tools.intellij'
version projectVersion // Plugin version
